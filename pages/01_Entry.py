import streamlit as st
import pandas as pd
import json
import os
import datetime
import re
from io import StringIO
import csv
import sys
import git

# Ajout du chemin pour les modules personnalis√©s
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# Configuration de la page
st.set_page_config(
    page_title="Saisie des M√©tadonn√©es",
    page_icon="üìù",
    layout="wide"
)

# Titre et description
st.title("Saisie des M√©tadonn√©es")
st.markdown("""
Ce formulaire vous permet de cr√©er des fiches de m√©tadonn√©es pour vos tables de donn√©es.
Vous pouvez soit saisir manuellement les informations, soit importer des donn√©es pour d√©tection automatique.
""")

# Fonction pour d√©tecter automatiquement le type de donn√©es
def detect_data_type(data_content):
    """D√©tecte automatiquement le type de donn√©es (CSV, JSON, etc.)"""
    data_content = data_content.strip()
    
    # D√©tection JSON
    if (data_content.startswith('{') and data_content.endswith('}')) or \
       (data_content.startswith('[') and data_content.endswith(']')):
        try:
            json.loads(data_content)
            return "json"
        except:
            pass
    
    # D√©tection CSV
    try:
        df = pd.read_csv(StringIO(data_content), sep=None, engine='python')
        if len(df.columns) > 1:
            return "csv"
    except:
        pass
    
    # D√©tection texte tabul√©
    if '\t' in data_content:
        lines = data_content.split('\n')
        if len(lines) > 1 and '\t' in lines[0]:
            return "tsv"
    
    # Par d√©faut, format texte
    return "text"

# Fonction pour d√©tecter automatiquement les colonnes depuis un aper√ßu des donn√©es
def detect_columns_from_data(data_preview):
    try:
        # Essayer de d√©tecter le format (CSV, TSV, etc.)
        if ";" in data_preview:
            delimiter = ";"
        elif "\t" in data_preview:
            delimiter = "\t"
        else:
            delimiter = ","
        
        # Lire les donn√©es
        df = pd.read_csv(StringIO(data_preview), delimiter=delimiter)
        
        # Cr√©er un dictionnaire pour chaque colonne
        columns = []
        for col in df.columns:
            col_type = "varchar"
            # D√©terminer le type de donn√©es
            if pd.api.types.is_numeric_dtype(df[col]):
                if all(df[col].dropna().apply(lambda x: int(x) == x if pd.notnull(x) else True)):
                    col_type = "integer"
                else:
                    col_type = "numeric"
            elif pd.api.types.is_datetime64_dtype(df[col]):
                col_type = "timestamp"
            elif pd.api.types.is_bool_dtype(df[col]):
                col_type = "boolean"
            
            columns.append({
                "name": col,
                "type": col_type,
                "description": ""
            })
        
        return columns
    except Exception as e:
        st.error(f"Erreur lors de la d√©tection des colonnes: {str(e)}")
        return []

# Fonction pour convertir les donn√©es en format standard
def convert_data(data_content, data_type):
    """Convertit les donn√©es au format standard pour le stockage"""
    if data_type == "json":
        return json.loads(data_content)
    
    elif data_type in ["csv", "tsv"]:
        separator = ',' if data_type == "csv" else '\t'
        df = pd.read_csv(StringIO(data_content), sep=separator)
        return df.to_dict(orient="records")
    
    else:  # format texte
        lines = data_content.strip().split('\n')
        return {"content": lines}

# Fonction pour sauvegarder les m√©tadonn√©es
def save_metadata(metadata, schema, table_name):
    """Sauvegarde les m√©tadonn√©es dans les dossiers appropri√©s et synchronise avec Git"""
    # Cr√©er le chemin de dossier si n√©cessaire
    base_dir = os.path.join(parent_dir, "SGBD", "Metadata")
    schema_dir = os.path.join(base_dir, schema)
    
    os.makedirs(schema_dir, exist_ok=True)
    
    # Cr√©er nom de fichier s√©curis√©
    safe_name = re.sub(r'[^\w\-\.]', '_', table_name)
    json_path = os.path.join(schema_dir, f"{safe_name}.json")
    txt_path = os.path.join(schema_dir, safe_name)
    
    # Sauvegarder en format JSON
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    # Cr√©er aussi un fichier TXT pour une lecture rapide
    with open(txt_path, 'w', encoding='utf-8') as f:
        f.write(f"Nom de la table: {metadata['table_name']}\n")
        f.write(f"Sch√©ma: {metadata['schema']}\n")
        f.write(f"Description: {metadata['description']}\n")
        f.write(f"Source: {metadata['source']}\n")
        f.write(f"Ann√©e: {metadata['year']}\n")
        f.write(f"Contact: {metadata['contact']}\n")
        f.write(f"Date de cr√©ation: {metadata.get('created_at', datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}\n\n")
        
        f.write("Colonnes:\n")
        for col in metadata.get('columns', []):
            f.write(f"- {col['name']} ({col['type']}): {col.get('description', '')}\n")
    
    # Synchroniser avec Git si disponible
    try:
        repo = git.Repo(parent_dir)
        repo.git.add(json_path)
        repo.git.add(txt_path)
        commit_message = f"Ajout/Mise √† jour des m√©tadonn√©es pour {schema}/{table_name}"
        repo.git.commit('-m', commit_message)
        st.success(f"M√©tadonn√©es sauvegard√©es et ajout√©es √† Git. N'oubliez pas de faire un 'git push' pour synchroniser.")
    except Exception as e:
        st.success(f"M√©tadonn√©es sauvegard√©es avec succ√®s dans {json_path} et {txt_path}")
        st.warning(f"Note: La synchronisation Git n'a pas fonctionn√©. Erreur: {str(e)}")
    
    return json_path

# Initialisation des variables de session
if "columns" not in st.session_state:
    st.session_state["columns"] = []

# Onglets pour les diff√©rentes m√©thodes d'entr√©e
tab1, tab2, tab3 = st.tabs(["Saisie manuelle", "Aper√ßu des donn√©es", "T√©l√©charger un fichier"])

with tab1:
    st.markdown("### Saisie manuelle des m√©tadonn√©es")
    st.info("Remplissez tous les champs pour cr√©er une fiche de m√©tadonn√©es compl√®te.")

with tab2:
    st.markdown("### D√©tection automatique depuis un aper√ßu")
    st.info("Collez un extrait de vos donn√©es pour d√©tecter automatiquement la structure.")
    
    data_preview = st.text_area(
        "Collez un extrait de vos donn√©es (CSV, Excel, etc.)",
        height=200,
        help="Collez les premi√®res lignes de vos donn√©es pour d√©tecter automatiquement les colonnes."
    )
    
    if data_preview:
        if st.button("D√©tecter les colonnes"):
            st.session_state["detected_columns"] = detect_columns_from_data(data_preview)
            st.success(f"{len(st.session_state['detected_columns'])} colonnes d√©tect√©es!")

with tab3:
    st.markdown("### Importer depuis un fichier")
    st.info("T√©l√©chargez un fichier pour d√©tecter automatiquement sa structure.")
    
    uploaded_file = st.file_uploader("Choisissez un fichier", type=["csv", "xlsx", "txt", "tsv"])
    
    if uploaded_file is not None:
        try:
            # D√©termination du type de fichier
            file_type = uploaded_file.name.split('.')[-1].lower()
            
            if file_type == "json":
                upload_metadata = json.load(uploaded_file)
                st.success("Fichier JSON charg√© avec succ√®s!")
                st.json(upload_metadata)
                
            elif file_type in ["csv", "tsv"]:
                separator = ',' if file_type == "csv" else '\t'
                df = pd.read_csv(uploaded_file, sep=separator)
                
                # D√©tecter les types de colonnes
                columns = []
                for col in df.columns:
                    col_type = "varchar"
                    # D√©terminer le type de donn√©es
                    if pd.api.types.is_numeric_dtype(df[col]):
                        if all(df[col].dropna().apply(lambda x: int(x) == x if pd.notnull(x) else True)):
                            col_type = "integer"
                        else:
                            col_type = "numeric"
                    elif pd.api.types.is_datetime64_dtype(df[col]):
                        col_type = "timestamp"
                    elif pd.api.types.is_bool_dtype(df[col]):
                        col_type = "boolean"
                    
                    columns.append({
                        "name": col,
                        "type": col_type,
                        "description": ""
                    })
                
                st.session_state["detected_columns"] = columns
                st.success(f"{len(columns)} colonnes d√©tect√©es!")
                
                # Aper√ßu des donn√©es
                st.subheader("Aper√ßu")
                st.dataframe(df.head(5))
                
                # Structure des colonnes
                st.subheader("Structure d√©tect√©e:")
                col_data = []
                for col in columns:
                    col_data.append({"Nom": col["name"], "Type": col["type"], "Description": col["description"]})
                
                st.table(pd.DataFrame(col_data))
                
            elif file_type == "xlsx":
                df = pd.read_excel(uploaded_file)
                
                # D√©tecter les types de colonnes (m√™me logique que pour CSV)
                columns = []
                for col in df.columns:
                    col_type = "varchar"
                    if pd.api.types.is_numeric_dtype(df[col]):
                        if all(df[col].dropna().apply(lambda x: int(x) == x if pd.notnull(x) else True)):
                            col_type = "integer"
                        else:
                            col_type = "numeric"
                    elif pd.api.types.is_datetime64_dtype(df[col]):
                        col_type = "timestamp"
                    elif pd.api.types.is_bool_dtype(df[col]):
                        col_type = "boolean"
                    
                    columns.append({
                        "name": col,
                        "type": col_type,
                        "description": ""
                    })
                
                st.session_state["detected_columns"] = columns
                st.success(f"{len(columns)} colonnes d√©tect√©es!")
                
                # Aper√ßu des donn√©es
                st.subheader("Aper√ßu")
                st.dataframe(df.head(5))
                
                # Structure des colonnes
                st.subheader("Structure d√©tect√©e:")
                col_data = []
                for col in columns:
                    col_data.append({"Nom": col["name"], "Type": col["type"], "Description": col["description"]})
                
                st.table(pd.DataFrame(col_data))
                
            elif file_type == "txt":
                content = uploaded_file.read().decode("utf-8")
                data_type = detect_data_type(content)
                upload_metadata = convert_data(content, data_type)
                st.success(f"Fichier texte charg√© et interpr√©t√© comme {data_type.upper()}")
                
                # Aper√ßu
                if isinstance(upload_metadata, list):
                    st.dataframe(pd.DataFrame(upload_metadata).head(5))
                else:
                    st.json(upload_metadata)
                
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier: {str(e)}")

# Section d'informations g√©n√©rales et formulaire
st.markdown("---")
st.markdown("## Informations g√©n√©rales")

# Utiliser les colonnes d√©tect√©es si disponibles
if "detected_columns" in st.session_state and st.session_state["detected_columns"]:
    if st.button("Utiliser les colonnes d√©tect√©es"):
        st.session_state["columns"] = st.session_state["detected_columns"]
        st.rerun()

# Formulaire pour la saisie des informations g√©n√©rales
with st.form("metadata_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        schema = st.text_input("Sch√©ma", help="Le sch√©ma dans lequel se trouve la table")
        table_name = st.text_input("Nom de la table", help="Le nom de la table dans la base de donn√©es")
        year = st.text_input("Ann√©e", help="L'ann√©e des donn√©es (ex: 2023)")
    
    with col2:
        source = st.text_input("Source", help="La source des donn√©es (ex: INSEE, Citepa)")
        contact = st.text_input("Contact", help="Personne responsable des donn√©es")
    
    description = st.text_area("Description", height=100, help="Description d√©taill√©e du contenu de la table")
    
    submitted = st.form_submit_button("Enregistrer les m√©tadonn√©es")

# Section des colonnes (en dehors du formulaire)
st.markdown("## Colonnes")
st.info("Ajoutez les colonnes de votre table en pr√©cisant leur nom, type et description.")

# Bouton pour ajouter une nouvelle colonne
if st.button("Ajouter une colonne"):
    st.session_state["columns"].append({
        "name": "",
        "type": "varchar",
        "description": ""
    })
    st.rerun()

# Affichage des colonnes existantes
for i, col in enumerate(st.session_state["columns"]):
    cols = st.columns([3, 2, 8, 1])
    with cols[0]:
        st.session_state["columns"][i]["name"] = st.text_input(
            f"Nom {i}",
            value=col["name"],
            key=f"col_name_{i}"
        )
    with cols[1]:
        st.session_state["columns"][i]["type"] = st.selectbox(
            f"Type {i}",
            ["varchar", "integer", "numeric", "boolean", "date", "timestamp", "geometry"],
            index=["varchar", "integer", "numeric", "boolean", "date", "timestamp", "geometry"].index(col["type"]) if col["type"] in ["varchar", "integer", "numeric", "boolean", "date", "timestamp", "geometry"] else 0,
            key=f"col_type_{i}"
        )
    with cols[2]:
        st.session_state["columns"][i]["description"] = st.text_input(
            f"Description {i}",
            value=col.get("description", ""),
            key=f"col_desc_{i}"
        )
    with cols[3]:
        if st.button("X", key=f"delete_col_{i}"):
            st.session_state["columns"].pop(i)
            st.rerun()

# Bouton de sauvegarde (en dehors du formulaire)
if submitted:
    if not schema:
        st.error("Veuillez sp√©cifier un sch√©ma")
    elif not table_name:
        st.error("Veuillez sp√©cifier un nom de table")
    else:
        try:
            # Cr√©er le dictionnaire de m√©tadonn√©es
            metadata = {
                "schema": schema,
                "table_name": table_name,
                "description": description,
                "source": source,
                "year": year,
                "contact": contact,
                "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "columns": st.session_state["columns"]
            }
            
            # Sauvegarder les m√©tadonn√©es
            file_path = save_metadata(metadata, schema, table_name)
            st.success(f"M√©tadonn√©es sauvegard√©es avec succ√®s dans {file_path}")
        except Exception as e:
            st.error(f"Erreur lors de la sauvegarde: {str(e)}") 